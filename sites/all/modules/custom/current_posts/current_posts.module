<?php
  /**
  * @file
  * A block module that displays recent blog and forum posts.
  */
  /**
  * Implements hook_help.
  *
  * Displays help and module information
  *
  * @param_arg
  * Array that holds the current path as returned from arg() function
  */
/**
 * drupal_add_css function specifies the general css settings for the module
 */
//drupal_add_css (drupal_get_path ('module', 'current_posts').'/css/current_posts.css');

/**
 * 
 * drupal_add_js function specifies the general js settings for the module
 */
//drupal_add_js (drupal_get_path ('module', 'current_posts').'/js/current_posts.js');

function current_posts_init()
{
	$options = array (
	 'type' => 'file',
	 'group' => CSS_DEFAULT,
	 'weight' => 0,
	 'every_page' => FALSE,
	 'media' => 'all',
	 'preprocess' => TRUE,
	);
	//drupal_add_css (drupal_get_path ('module', 'current_posts').'/css/current_posts.css');
}

  function current_posts_help($path, $arg) {
    switch ($path) {
      case "admin/help#current_posts":
        return '<p>' . t("Displays links to nodes created on this page") . '</p>';
        break;
    }
  }
  /**
  * Implements hook_block_info().
  
  *
  */
  function current_posts_block_info() {
    $blocks['current_posts'] = array (
      'info' => t('Current posts'), // the name that will appear in the block list.
      'cache' => DRUPAL_CACHE_PER_ROLE, //Default
    );
    return $blocks;
  }
  
  /**
  * Custom content function.
  *
  * Set beginning and end dates, retrieve posts from database
  * saved in that time period.
  *
  * @return
  *
  * A result set of the targeted posts.
  */
  function current_posts_contents($display) // $display argument is new.
  {
  	global $user;
  	dsm($user);
    //Get today's date.
    $today = getdate();
    //Calculate the date a week ago.
    $start_time = mktime(0,0, 0, $today['mon'], ($today['mday'] - 7), $today['year']);
    // Get all posts from one week ago to the present.
    $end_time = time();
    
    //NEW LINE
    $max_num = variable_get ('current_posts_max', 3);
    
    //Use database API to retrieve current posts.
    $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title', 'created'))
    ->condition('status', 1) //Published
    ->condition('created', array($start_time, $end_time), 'BETWEEN')
    ->condition('uid', $user->uid, '<>')
    ->orderBy('created', 'DESC'); //Most recent first.
    
    if ($display == 'block')
    {
    	// Restrict the range if called with 'block' argument
    	$query->range(0, $max_num);
    } // Now proceeds to execute().
    
    // If called by page, query procceds directly to execute().
  //->range(0, $max_num) // NEW LINE
  //  ->execute();
  
    return $query->execute();
  }
  
  /**
  * Implements hook_block_view().
  *
  * Prepares the contents of the block.
  */
  function current_posts_block_view($delta = '')
  {
    switch ($delta)
    {
      case 'current_posts':
        $block['subject'] = t('Current posts');
        if (user_access('access content'))
        {
          //Use our custom function to retrieve data.
          $result = current_posts_contents('block');
          //Array to contain items for the block to render.
          $items = array();
          //Iterate over the result set and format as links.
          foreach ($result as $node)
          {
            $items[] = array(
              'data' => l ($node->title, 'node/' . $node->nid),
            );
          }
          
          if (empty($items)) //No content in the last week
          {
            $block['content'] = t ('No posts have been added');
            
            /*$block['content']['more'] = array (
            	'#theme' => 'more_link__current_posts',
            	'#url' => 'current_posts',
            	'#title' => t ('See the full list of current posts.'),
            );*/
            /*$page_array['current_posts_arguments'] = array (
            	// Title serves as page subtitle.
            	'#title' => t ('All posts from last week'),
            	'#markup' => t ('No posts available'),
            );
            return $page_array;*/
          }
          else //Pass data through theme function.
          {
           /* $block['content'] = theme('item_list', array(
              'items' => $items));*/
              
            // Pass data through theme function
            $block['content']['posts'] = array (
            	'#theme' => 'item_list__current_posts__block',
            	'#items' => $items,
            );
            
            // Add a link to the page for more entries
            $block['content']['more'] = array (
            	'#theme' => 'more_link__current_posts',
            	'#url' => 'current_posts',
            	'#title' => t ('See the full list of current posts.'),
            );
            
            /*$page_array['current_posts_arguments'] = array (
            	'#title' => t ('All posts from the last week'),
            	'#items' => $items,
            	// Theme hook with suggestion.
            	'#theme' => 'item_list__current_posts',
            );
            return $page_array;*/
          }
        }
    }
    return $block;
  }
  
  /**
  *Implements hook_menu().
  */
  function current_posts_menu()
  {
    $items = array();

    $items['admin/config/content/current_posts'] = array (
     'title' => 'Current posts',
     'description' => 'Configuration for current posts module',
     'page callback' => 'drupal_get_form',
     'page arguments' => array ('current_posts_form'),
     'access arguments' => array ('access admininstration pages'),
     'type' => MENU_NORMAL_ITEM,
    );
    
    $items['current_posts'] = array (
    	'title' => 'Current posts',
    	'page callback' => '_current_posts_page',
    	'access arguments' => array ('access current_posts content'),
    	'type' => MENU_CALLBACK, //Will appear in Navigation menu.
    );
      return $items;
  }
  
  /**
  * Form function, called by drupal_get_form()
  * in current_posts_menu().
  */
  function current_posts_form ($form, &$form_state)
  {
    $form['current_posts_max'] = array(
      '#type' => 'textfield',
      '#title' => t ('Maximum number of posts'),
      '#default_value' => variable_get ('current_posts_max', 3),
      '#size' => 2,
      '#maxlength' => 2,
      '#description' => t ('The maximum number of links to display in the block.'),
      '#required' => TRUE,
    );
    return system_settings_form ($form);
  }
  
  /**
  * Implements validation from the form API.
  *
  * @param $form
  *	A structured array containing the elements and properties of the form.
  * @param $form_state
  *	An array that stores information about the form's current state during processing.
  */
  function current_posts_form_validate($form, &$form_state)
  {
  	$max_num = $form_state['values']['current_posts_max'];
  	if (!is_numeric ($max_num))
  	{
  		form_set_error ('current_posts_max', t ('You must enter an integer for the maximum number of posts to display.'));
  	}
  	else if ($max_num <= 0)
  	{
  		form_set_error ('current_posts_max', t ('Maximum number of posts to display must be greater than zero'));
  	}
  }
  
  /**
  * Implements hook_permission().
  */
  function current_posts_permission()
  {
  	return array
  	(
  		'access current_posts content' => array ('title' => t('Access content for the Current posts module'),)
  	);
  }
  
  /**
  * Custom page callback function, declared in current_posts_menu().
  */
  function _current_posts_page()
  {
  	//drupal_set_title ('Current posts');
  	$result = current_posts_contents('page');
  	drupal_set_title ('Current posts');
  	
  	// Array to contain items for the page to render.
  	$items = array();
  	
  	// Iterate over the resultset and format the links.
  	foreach ($result as $node)
  	{
  		$items[] = array ('data' => l ($node->title, 'node/' . $node->nid),);
  	}
  	
  	if (empty ($items)) // No content in the last week
  	{
  		$page_array['current_posts_argument'] = array (
  			//Title serves as page subtitle
  			'#title' => t ('All posts from the last week'),
  			'#markup' => t ('No posts available'),
  		);
  		return page_array;
  	}
  	else
  	{
  		$page_array['current_posts_arguments'] = array (
  			'#title' => t ('All posts from the last week.'),
  			'#items' => $items,
  			// Theme function includes theme hook suggestion.
  			'#theme' => 'item_list__current_posts',
  		);
  		return $page_array;
  	}
  }
  
  function current_posts_form_alter(&$form, $form_state, $form_id)  {
  	dsm ($form);
//  	print_r($form);
  	drupal_set_message($form_id); 
  	switch ($form_id)  {
  	 	case 'comment_node_page_form':
  	 		$form['comment_subscribe'] = array (
  	 		  '#type' => 'checkbox',
  	 		  '#title' => t ('Subscribe to replies to this comment'),
  	 		);
  	 		break;
  	 }
  }